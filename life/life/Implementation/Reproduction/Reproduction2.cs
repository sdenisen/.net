using System;
using System.Collections.Generic;
using Life.Domain;
using Life.Domain.Interfaces;

namespace Life.Implementation.Reproduction
{   
    public class Reproduction2 : IReproduction
    {
        /// <summary>
        /// DNA shuffling of rabbit parents by Rule. The Rule is generated by random.
        /// for example:
        /// parent1        = 000000
        /// parent2        = 333333
        /// Shuffling Rule = 010111
        /// children       = 030333
        /// </summary>
        public IDna Act(Rabbit parent1, Rabbit parent2)
        {
            var gene = new List<int>(); 
            var countOfNucleotide = parent1.Dna.Gene.Count;
            var crossover = GenerateCrossover(countOfNucleotide);
            
            for (var i = 0; i < countOfNucleotide; i++)
            {
                var nucleotide = crossover[i] ? parent1.Dna.Gene[i] : parent2.Dna.Gene[i];
                gene.Add(nucleotide);
            }
            return new Dna{Gene = gene};
        }

        /// <summary>
        /// Generate rule of cross over
        /// </summary>
        /// <param name="count">length of DNA</param>
        /// <returns>list bools elements, (cross over rule)</returns>
        private bool[] GenerateCrossover(int count)
        {
            var rand = new Random(DateTime.Now.Millisecond);
            var crossover = new bool[count];

            for(int i=0; i<count; i++)
            {
                var res = rand.Next(2);
                crossover[i] = Convert.ToBoolean(res);
            }
            return crossover;
        }
    }
}
